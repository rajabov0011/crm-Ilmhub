@page "/lead-details"
@using crm_Ilmhub.Interfaces
@using crm_Ilmhub.Models
@using MudBlazor
@using System.Text.RegularExpressions

<MudDialog>
    <TitleContent>
        <MudStack Row="true" Justify="@Justify.Center" AlignItems="@AlignItems.Center" StretchItems="@StretchItems.Middle">
            <MudIcon Icon="@Icons.Material.Filled.Info" Title="Info" Color="Color.Info" Size="Size.Large"/>
            <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Right">@(Lead.Name?.Substring(0, Math.Min(Lead.Name?.Length ?? 0, 20)))</MudText>
            <MudSpacer/>
            <MudSpacer/>
            <MudSwitch @bind-Value="nullable" Color="Color.Primary"></MudSwitch>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing=2>
            <MudStack Row="true" Justify="@Justify.FlexStart" AlignItems="@AlignItems.Center" StretchItems="@StretchItems.End">
                <MudIcon Color="Color.Info" Style="font-size: medium;" Icon="@Icons.Material.Rounded.LocalPhone" />
                <MudText Typo="Typo.subtitle1">@FormatPhoneNumber(Lead.Phone)</MudText>
                <MudChip T="string" Variant="Variant.Text" Size="@Size.Medium" Icon="@Icons.Material.Rounded.PermContactCalendar" Color="Color.Secondary">@Lead.Source</MudChip>
            </MudStack>

            <MudStack Row="true" Justify="@Justify.Center" AlignItems="@AlignItems.Center" StretchItems="@StretchItems.All">
                <MudChip T="string" Variant="Variant.Text" Size="@Size.Medium" Icon="@Icons.Material.Rounded.Star" Color="Color.Primary">@(Lead.InterestedCourse?.Name ?? "N/A")</MudChip>
                <MudText Color="Color.Tertiary" Typo="Typo.subtitle2">@(Lead.ModifiedAt?.ToString("dd MMM HH:mm") ?? Lead.CreatedAt.ToString("dd MMM HH:mm"))</MudText>
            </MudStack>
            <MudStack Row="true" Justify="@Justify.Center" AlignItems="@AlignItems.Center" StretchItems="@StretchItems.Middle">
                <MudTooltip Text="@Lead.Notes">
                    <MudButton Class="rounded-pill px-4" Variant="Variant.Text" StartIcon="@Icons.Material.Rounded.Comment" Color="Color.Success">Izoh</MudButton>
                </MudTooltip>
                @if (string.IsNullOrWhiteSpace(Lead.Reason) is false)
                {
                    <MudTooltip Text="@Lead.Reason">
                        <MudButton Class="rounded-pill px-4" Variant="Variant.Text" StartIcon="@Icons.Material.Rounded.EditNote" Color="Color.Error">Sabab</MudButton>
                    </MudTooltip>
                }
            </MudStack>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Size="Size.Medium" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public required Lead Lead { get; set; }

    [CascadingParameter] 
    private MudDialogInstance? MudDialog { get; set; }
    [Inject] public ILeadService LeadService { get; set; } = default!;
    public bool? nullable { get; set; }

    protected override void OnParametersSet()
    {
        nullable = !Lead.IsHidden;
    }

    private async Task Submit()
    {
        if (nullable == false)
        {
            await LeadService.UpdateLeadVisibilityAsync(Lead, true);
        }
        else
        {
            await LeadService.UpdateLeadVisibilityAsync(Lead, false);
        }
        await LeadService.UpdateLeadAsync(Lead);
        MudDialog?.Close(DialogResult.Ok(true));
    }

    public static string FormatPhoneNumber(string? input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return string.Empty;
        }

        var regex = new Regex(@"(\d{2})[\s\-]?(\d{3})[\s\-]?(\d{4})");
        var result = regex.Replace(input, "$1 $2 $3");

        if (result == input)
        {
            return input;
        }

        return result;
    }
}